<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Выставление оценок</title>
  <script src="/routes/mark.js" defer></script>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    table, th, td {
      border: 1px solid black;
      padding: 8px;
      text-align: center;
    }
  </style>
</head>
<body>
  <h1>Выставление оценок</h1>
  
  <form id="markForm">
    <label for="subject">Выберите предмет:</label>
    <div class="input-field col s12">
    <select multiple id="subject" name="subject" >
      
      <!-- Опции будут добавлены динамически -->
    </select>
    </div>
    
    <label for="class">Выберите класс:</label>
    <select id="class" name="class" disabled>
      <!-- Опции будут добавлены динамически -->
    </select>
    
    <button type="submit">Загрузить таблицу</button>
  </form>
  
  <div id="schedule">
    <!-- Здесь будет динамически добавлена таблица с оценками -->
  </div>

  <!-- Ваш клиентский JavaScript для взаимодействия с сервером -->
  <script>
    document.addEventListener('DOMContentLoaded', async function() {
      try {
        const subjectsResponse = await fetch('/mark/subjects-and-classes');
        if (!subjectsResponse.ok) {
          throw new Error('Failed to fetch subjects and classes');
        }
        const data = await subjectsResponse.json();
        const subjectsSelect = document.getElementById('subject');
        const classesSelect = document.getElementById('class');

        data.subjects.forEach(subject => {
          const option = document.createElement('option');
          option.value = subject;
          option.textContent = subject;
          subjectsSelect.appendChild(option);
        });

        subjectsSelect.addEventListener('change', async function() {
          const selectedSubject = subjectsSelect.value;
          classesSelect.innerHTML = '<option value="">Выберите класс</option>';
          classesSelect.disabled = true;

          if (selectedSubject) {
            const classesResponse = await fetch(`/mark/classes?subject=${selectedSubject}`);
            if (classesResponse.ok) {
              const classesData = await classesResponse.json();
              classesData.classes.forEach(klass => {
                const option = document.createElement('option');
                option.value = klass;
                option.textContent = klass;
                classesSelect.appendChild(option);
              });
              classesSelect.disabled = false;
            } else {
              console.error('Failed to fetch classes');
            }
          }
        });

      } catch (error) {
        console.error('Error fetching subjects and classes:', error);
      }

      const form = document.getElementById('markForm');
      const scheduleDiv = document.getElementById('schedule');

      form.addEventListener('submit', async function(event) {
        event.preventDefault();

        const subject = document.getElementById('subject').value;
        const classValue = document.getElementById('class').value;

        try {
          const response = await fetch(`/mark/schedule?subject=${subject}&class=${classValue}`);
          if (!response.ok) {
            throw new Error('Failed to fetch schedule');
          }
          const data = await response.json();

          // Очищаем предыдущие данные
          scheduleDiv.innerHTML = '';

          // Создаем таблицу с расписанием
          const table = document.createElement('table');
          const thead = document.createElement('thead');
          const tbody = document.createElement('tbody');

          // Создаем заголовки таблицы
          const headerRow = document.createElement('tr');
          const studentHeader = document.createElement('th');
          studentHeader.textContent = 'Ученик';
          headerRow.appendChild(studentHeader);

          data.dates.forEach(date => {
            const dateHeader = document.createElement('th');
            dateHeader.textContent = date;
            headerRow.appendChild(dateHeader);
          });

          thead.appendChild(headerRow);
          table.appendChild(thead);

          // Заполняем таблицу данными
          data.students.forEach(student => {
            const studentRow = document.createElement('tr');
            const studentCell = document.createElement('td');
            studentCell.textContent = student;
            studentRow.appendChild(studentCell);

            data.dates.forEach(date => {
              const dateCell = document.createElement('td');
              // Здесь можно добавить логику для вывода оценок или других данных
              dateCell.textContent = ''; // Заменить на нужные данные
              studentRow.appendChild(dateCell);
            });

            tbody.appendChild(studentRow);
          });

          table.appendChild(tbody);
          scheduleDiv.appendChild(table);

        } catch (error) {
          console.error('Error fetching schedule:', error);
        }
      });
    });
  </script>
</body>
</html>
