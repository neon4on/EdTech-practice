<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Журнал</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
  <style>
    .table-container {
      overflow-x: auto;
      max-width: 100%;
    }

    #students-table {
      border-collapse: collapse;
      width: 100%;
    }

    #students-table th, #students-table td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: center;
    }

    #students-table th {
      background-color: #f2f2f2;
    }

    #students-table td input[type="number"] {
      width: 40px;
      border: none;
      text-align: center;
    }

    .fixed {
      position: sticky;
      left: 0;
      background: white;
      z-index: 2;
    }

    #month-row th, #dates-row th {
      min-width: 80px;
    }

    .tooltip {
      position: relative;
      cursor: pointer;
    }

    .tooltip .tooltiptext {
      visibility: hidden;
      background-color: #555;
      color: #fff;
      text-align: center;
      border-radius: 6px;
      padding: 5px;
      position: absolute;
      z-index: 9999;
      bottom: 125%;
      left: 50%;
      transform: translateX(-50%);
      opacity: 0;
      transition: opacity 0.3s;
      white-space: nowrap;
    }

    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }

    #students-table th.fixed, #students-table td.fixed {
      width: 150px;
      min-width: 150px;
      max-width: 150px;
    }

    .date-column {
      min-width: 80px;
    }
  </style>
</head>
<body>
  <div class="content" id="content">
  <div class="container">
    <h1>Журнал</h1>
    <div class="input-field">
      <select id="subject-select" class="browser-default">
        <option value="" disabled selected>Выберите предмет</option>
      </select>
    </div>
    <div class="input-field">
      <select id="class-select" class="browser-default" disabled>
        <option value="" disabled selected>Выберите класс</option>
      </select>
    </div>
    <div class="input-field">
      <select id="category-select" class="browser-default" disabled>
        <option value="" disabled selected>Выберите категорию</option>
      </select>
    </div>
    <div class="table-container">
      <table id="students-table">
        <thead>
          <tr id="month-row">
            <th class="fixed" colspan="2">Ученик</th>
          </tr>
          <tr id="dates-row">
            <th class="fixed">Имя</th>
            <th class="fixed">Фамилия</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </div>
  </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
  <script>
    $(document).ready(function() {
      let studyPlanTopics = [];

      function loadStudyPlanTopics(subjectId, classId) {
        return $.get(`/class_book/study_plan`, { subjectId: subjectId, classId: classId })
          .done(function(data) {
            studyPlanTopics = data.topics;
            console.log('Темы учебного плана загружены:', studyPlanTopics);
          })
          .fail(function(xhr) {
            console.error('Ошибка загрузки тем учебного плана:', xhr);
          });
      }

      function loadSubjects() {
        console.log('Loading subjects...');
        $.get('/class_book/subjects')
          .done(function(data) {
            console.log('Subjects ', data);
            const subjectSelect = $('#subject-select');
            subjectSelect.empty().append('<option value="" disabled selected>Выберите предмет</option>');
            data.forEach(function(subject) {
              subjectSelect.append(`<option value="${subject.id}">${subject.name}</option>`);
            });
            subjectSelect.formSelect();
            console.log('Subjects loaded successfully');
          })
          .fail(function(xhr) {
            console.error('Ошибка загрузки предметов:', xhr);
          });
      }

      function loadClasses() {
        console.log('Loading classes...');
        $.get('/class_book/classes')
          .done(function(data) {
            console.log('Classes ', data);
            const classSelect = $('#class-select');
            classSelect.empty().append('<option value="" disabled selected>Выберите класс</option>');
            data.forEach(function(cls) {
              classSelect.append(`<option value="${cls.id}">${cls.name}</option>`);
            });
            classSelect.prop('disabled', false).formSelect();
            console.log('Classes loaded successfully');
          })
          .fail(function(xhr) {
            console.error('Ошибка загрузки классов:', xhr);
          });
      }

      function loadGradeWeights() {
        console.log('Loading grade weights...');
        $.get('/class_book/grade_weights')
          .done(function(data) {
            console.log('Grade weights ', data);
            const categorySelect = $('#category-select');
            categorySelect.empty().append('<option value="" disabled selected>Выберите категорию</option>');
            data.forEach(function(category) {
              categorySelect.append(`<option value="${category.category}" data-weight="${category.weight}">${category.category}</option>`);
            });
            categorySelect.prop('disabled', false).formSelect();
            console.log('Grade weights loaded successfully');
          })
          .fail(function(xhr) {
            console.error('Ошибка загрузки категорий:', xhr);
          });
      }

      function loadExistingGrades() {
        const classId = $('#class-select').val();
        const subjectId = $('#subject-select').val();
        const category = $('#category-select').val();

        if (classId && subjectId && category) {
          $.get('/class_book/existing-grades', { classId: classId, subjectId: subjectId, category: category })
            .done(function(data) {
              data.forEach(function(grade) {
                const input = $(`input[data-student-id="${grade.student_id}"][data-date="${grade.date}"][data-category="${category}"]`);
                if (input.length) {
                  input.val(grade.grade);
                }
              });
            })
            .fail(function(xhr) {
              console.error('Ошибка загрузки существующих оценок:', xhr);
            });
        }
      }

      function loadStudentsAndSchedule() {
        const classId = $('#class-select').val();
        const subjectId = $('#subject-select').val();
        const category = $('#category-select').val();

        if (classId && subjectId && category) {
          $.get('/class_book/students', { classId: classId })
            .done(function(studentsData) {
              $.get('/class_book/schedule', { subjectId: subjectId, classId: classId })
                .done(function(scheduleData) {
                  const tableBody = $('#students-table tbody');
                  const datesRow = $('#dates-row');
                  const monthRow = $('#month-row');

                  tableBody.empty();
                  datesRow.find('th:not(.fixed)').remove();
                  monthRow.find('th:not(.fixed)').remove();

                  loadStudyPlanTopics(subjectId, classId).then(function() {
                    scheduleData.sort((a, b) => new Date(a.fullDate) - new Date(b.fullDate));

                    const monthGroups = scheduleData.reduce((groups, item) => {
                      const date = new Date(item.fullDate);
                      const month = date.toLocaleString('ru', { month: 'long' });
                      if (!groups[month]) {
                        groups[month] = [];
                      }
                      groups[month].push(item);
                      return groups;
                    }, {});

                    let topicIndex = 0;

                    Object.entries(monthGroups).forEach(([month, dates]) => {
                      monthRow.append(`<th colspan="${dates.length}">${month}</th>`);
                      dates.forEach(date => {
                        const dateObj = new Date(date.fullDate);
                        const day = dateObj.getDate();
                        const weekDay = dateObj.toLocaleString('ru', { weekday: 'short' });
                        const topic = studyPlanTopics[topicIndex] || 'Тема отсутствует';
                        datesRow.append(`
                          <th class="tooltip date-column" data-date="${date.fullDate}">
                            ${day} ${weekDay}
                            <span class="tooltiptext">Тема: ${topic}</span>
                          </th>
                        `);
                        topicIndex++;
                      });
                    });

                    studentsData.forEach(function(student) {
                      let row = `<tr data-student-id="${student.id}">
                                   <td class="fixed">${student.firstname}</td>
                                   <td class="fixed">${student.lastname}</td>`;

                      scheduleData.forEach(function(date) {
                        row += `<td>
                                  <input type="number" min="2" max="5" 
                                    data-student-id="${student.id}" 
                                    data-date="${date.fullDate}" 
                                    data-category="${category}" 
                                    data-weight="${$('#category-select option:selected').data('weight')}">
                                </td>`;
                      });

                      row += '</tr>';
                      tableBody.append(row);
                    });

                    loadExistingGrades();
                  });
                })
                .fail(function(xhr) {
                  console.error('Ошибка загрузки расписания:', xhr);
                });
            })
            .fail(function(xhr) {
              console.error('Ошибка загрузки учеников:', xhr);
            });
        }
      }

      loadSubjects();

      $('#subject-select').change(function() {
        console.log('Subject changed');
        loadClasses();
        loadGradeWeights();
      });

      $('#class-select, #category-select').change(function() {
        console.log('Class or category changed');
        loadStudentsAndSchedule();
      });

      $('#students-table').on('focus', 'input[type="number"]', function() {
        $(this).attr('data-previous-value', $(this).val());
      });

      $('#students-table').on('change', 'input[type="number"]', function() {
        const input = $(this);
        const data = {
          studentId: input.data('student-id'),
          classId: $('#class-select').val(),
          subjectId: $('#subject-select').val(),
          date: input.data('date'),
          category: input.data('category'),
          weight: input.data('weight'),
          grade: input.val()
        };

        console.log('Saving grade:', data);

        if (!data.studentId) {
          console.error('student_id is undefined');
          return;
        }

        $.ajax({
          url: '/class_book/grade',
          method: 'POST',
           data,
          success: function() {
            console.log('Grade saved successfully');
            input.attr('data-previous-value', data.grade);
          },
          error: function(xhr) {
            console.error('Ошибка сохранения оценки:', xhr);
            input.val(input.attr('data-previous-value') || '');
          }
        });
      });
    });

    function toggleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const header = document.getElementById('header');
            const content = document.getElementById('content');
            sidebar.classList.toggle('visible');
            header.classList.toggle('sidebar-open');
            content.classList.toggle('sidebar-open');
        }

            function closeSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const header = document.getElementById('header');
            const content = document.getElementById('content');
            sidebar.classList.remove('visible');
            header.classList.remove('sidebar-open');
            content.classList.remove('sidebar-open');
            }
  </script>
</body>
</html>